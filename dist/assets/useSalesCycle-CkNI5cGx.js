import{s as c,a as u,p as y,d as _,q as f,t as C}from"./index-NvUe1ZN8.js";const l={get:async e=>{const{data:t,error:s}=await c.from("sales_cycles").select("*").eq("user_id",e).order("created_at",{ascending:!1}).limit(1).single();if(s&&s.code!=="PGRST116")throw s;return t||null},update:async(e,t)=>{if(t.start_date&&t.end_date){const{data:s,error:a}=await c.from("sales_cycles").upsert({user_id:e,start_date:t.start_date,end_date:t.end_date},{onConflict:"user_id"}).select().single();if(a)throw a;return s}else{const{data:s}=await c.from("sales_cycles").select("*").eq("user_id",e).single();if(s){const{data:a,error:n}=await c.from("sales_cycles").update(t).eq("user_id",e).select().single();if(n)throw n;return a}else throw new Error("Cannot create sales cycle without both start and end dates")}}};function w(){const{user:e}=u(),t=y(),{addNotification:s}=_(),a=["salesCycle",e==null?void 0:e.id],{data:n,isLoading:o,error:i}=f({queryKey:a,queryFn:()=>l.get(e.id),enabled:!!e,retry:!1}),d=C({mutationFn:r=>l.update(e.id,r),onSuccess:r=>{t.setQueryData(a,r),s("Sales Cycle Updated","Your sales cycle dates have been saved.")},onError:r=>{s("Update Failed",r.message||"Could not save the sales cycle.")}});return{salesCycle:n,isLoading:o,error:i,updateSalesCycle:d}}export{w as u};
